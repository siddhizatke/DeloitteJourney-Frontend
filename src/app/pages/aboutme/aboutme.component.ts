// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component, OnInit } from '@angular/core';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { PagesdetailsService } from '../../shared/aboutme/aboutme.service';
import { Pagesdetails, PagesdetailsPhotos } from '../../shared/aboutme/aboutme.model';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Observable } from 'rxjs/internal/Observable';

@Component({
  selector: 'app-aboutme',
  templateUrl: './aboutme.component.html',
  standalone: true,
  styleUrls: ['./aboutme.component.css'],
  imports: [CommonModule, FormsModule],
})
export class AboutmeComponent implements OnInit {
  pagesDetailsList: Pagesdetails[] = [];
  PagesdetailsPhotosList: PagesdetailsPhotos[] = [];
  selectedProfilePicture: File | null = null;
  selectedPhotos: File[] = [];
  selectedFile: File | null = null;
  selectedFilePreviewUrl: SafeUrl | null = null;
  selectedDetails: Pagesdetails = {
    id: 0,
    name: '',
    aboutMe: '',
    aboutMeFormal: '',
    profilePictureBase64: ''
  };
  loadingImages: boolean[] = [];
  successMessage: string = '';

  // Separate error messages for modal and carousel
  formErrorMessage: string = '';
  carouselErrorMessage: string = '';
  userRole: string = '';

  constructor(
    public service: PagesdetailsService,
    private modalService: NgbModal,
    private sanitizer: DomSanitizer
  ) {}

ngOnInit() {
      this.refreshAllData();
  const user = sessionStorage.getItem('user');
  if (user) {
    this.userRole = JSON.parse(user).role; // Ensure 'roles' matches the backend response field
  console.log('User role:', this.userRole);}
}


  refreshAllData(): void {
  this.formErrorMessage = ''; // Reset form error message
  this.carouselErrorMessage = ''; // Reset carousel error message

  this.service.refreshList().subscribe({
    next: (data: Pagesdetails[]) => {
      this.pagesDetailsList = data;
    },
    error: (err: any) => {
      this.formErrorMessage = 'Failed to load user details. Please try again later.';
    }
  });

  this.service.refreshPhotoList().subscribe({
    next: (data: PagesdetailsPhotos[]) => {
      this.PagesdetailsPhotosList = data;
      this.loadingImages = this.PagesdetailsPhotosList.map(() => true);
    },
    error: (err: any) => {
      this.carouselErrorMessage = 'Failed to load photos. Please try again later.';
    }
  });
}

  onImageLoad(index: number) {
    this.loadingImages[index] = false;
  }

  onImageError(event: Event, fallbackUrl: string): void {
    (event.target as HTMLImageElement).src = fallbackUrl;
    this.carouselErrorMessage = 'Some images failed to load.';
  }

  openEditModal(details: Pagesdetails, modal: any): void {
    this.selectedDetails = { ...details };
    this.selectedFile = null;
    this.selectedFilePreviewUrl = null;
    this.formErrorMessage = '';
    this.modalService.open(modal, { size: 'lg', backdrop: 'static' });
  }

  onProfilePictureSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.selectedFile = input.files[0];
      this.selectedFilePreviewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.selectedFile));
    }
  }

  onPhotosSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.selectedPhotos = Array.from(input.files);
    }
  }

  sanitizeUrl(url: string): SafeUrl {
    return this.sanitizer.bypassSecurityTrustUrl(url);
  }

  updateDetails(): void {
   if (!this.selectedDetails.id) {
    this.formErrorMessage = 'ID is required.';
    return;
  }
  if (!this.selectedDetails.name || this.selectedDetails.name.trim().length < 3) {
    this.formErrorMessage = 'Name is required and must be at least 3 characters.';
    return;
  }
  if (!this.selectedFile) {
    this.formErrorMessage = 'Profile picture is required.';
    return;
  }
    const formData = new FormData();
    formData.append('id', this.selectedDetails.id.toString());
    formData.append('name', this.selectedDetails.name);
    formData.append('aboutMe', this.selectedDetails.aboutMe || '');
    formData.append('aboutMeFormal', this.selectedDetails.aboutMeFormal || '');
    if (this.selectedFile) {
      formData.append('profilePicture', this.selectedFile);
    }
      this.service.updateUser(formData).subscribe({
        next: (response: any) => {
          this.refreshAllData();
          this.successMessage = 'Data updated successfully!';
          this.formErrorMessage = '';
          this.modalService.dismissAll();
          setTimeout(() => {
            this.successMessage = '';
          }, 3000);
        },
        error: (error) => {
          // Try to get backend error message
          if (error.error && error.error.message) {
            this.formErrorMessage = error.error.message;
          } else if (typeof error.error === 'string') {
            this.formErrorMessage = error.error;
          } else if (error.status === 404) {
            this.formErrorMessage = 'User not found. Please refresh and try again.';
          } else if (error.status === 400) {
            this.formErrorMessage = 'Invalid data. Please check your input.';
          } else if (error.status === 500) {
            this.formErrorMessage = 'Server error. Please try again later.';
          } else {
            this.formErrorMessage = 'Failed to update data. Please try again.';
          }
        }
      });
    }

  sanitizeMailto(url: string): SafeUrl {
    return this.sanitizer.bypassSecurityTrustUrl(url);
  }
}
